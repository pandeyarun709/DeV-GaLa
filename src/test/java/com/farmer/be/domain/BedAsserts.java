package com.farmer.be.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class BedAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertBedAllPropertiesEquals(Bed expected, Bed actual) {
        assertBedAutoGeneratedPropertiesEquals(expected, actual);
        assertBedAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertBedAllUpdatablePropertiesEquals(Bed expected, Bed actual) {
        assertBedUpdatableFieldsEquals(expected, actual);
        assertBedUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertBedAutoGeneratedPropertiesEquals(Bed expected, Bed actual) {
        assertThat(actual)
            .as("Verify Bed auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertBedUpdatableFieldsEquals(Bed expected, Bed actual) {
        assertThat(actual)
            .as("Verify Bed relevant properties")
            .satisfies(a -> assertThat(a.getType()).as("check type").isEqualTo(expected.getType()))
            .satisfies(a -> assertThat(a.getFloor()).as("check floor").isEqualTo(expected.getFloor()))
            .satisfies(a -> assertThat(a.getRoomNo()).as("check roomNo").isEqualTo(expected.getRoomNo()))
            .satisfies(a -> assertThat(a.getDailyRate()).as("check dailyRate").isEqualTo(expected.getDailyRate()))
            .satisfies(a -> assertThat(a.getIsInsuranceCovered()).as("check isInsuranceCovered").isEqualTo(expected.getIsInsuranceCovered())
            )
            .satisfies(a -> assertThat(a.getIsActive()).as("check isActive").isEqualTo(expected.getIsActive()))
            .satisfies(a -> assertThat(a.getCreatedBy()).as("check createdBy").isEqualTo(expected.getCreatedBy()))
            .satisfies(a -> assertThat(a.getCreatedOn()).as("check createdOn").isEqualTo(expected.getCreatedOn()))
            .satisfies(a -> assertThat(a.getUpdatedBy()).as("check updatedBy").isEqualTo(expected.getUpdatedBy()))
            .satisfies(a -> assertThat(a.getUpdatedOn()).as("check updatedOn").isEqualTo(expected.getUpdatedOn()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertBedUpdatableRelationshipsEquals(Bed expected, Bed actual) {
        assertThat(actual)
            .as("Verify Bed relationships")
            .satisfies(a -> assertThat(a.getHospital()).as("check hospital").isEqualTo(expected.getHospital()))
            .satisfies(a -> assertThat(a.getAdmissions()).as("check admissions").isEqualTo(expected.getAdmissions()));
    }
}
