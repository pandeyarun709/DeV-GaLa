package com.farmer.be.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class AdmissionAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAdmissionAllPropertiesEquals(Admission expected, Admission actual) {
        assertAdmissionAutoGeneratedPropertiesEquals(expected, actual);
        assertAdmissionAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAdmissionAllUpdatablePropertiesEquals(Admission expected, Admission actual) {
        assertAdmissionUpdatableFieldsEquals(expected, actual);
        assertAdmissionUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAdmissionAutoGeneratedPropertiesEquals(Admission expected, Admission actual) {
        assertThat(actual)
            .as("Verify Admission auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAdmissionUpdatableFieldsEquals(Admission expected, Admission actual) {
        assertThat(actual)
            .as("Verify Admission relevant properties")
            .satisfies(a -> assertThat(a.getDetails()).as("check details").isEqualTo(expected.getDetails()))
            .satisfies(a -> assertThat(a.getAdmissionStatus()).as("check admissionStatus").isEqualTo(expected.getAdmissionStatus()))
            .satisfies(a -> assertThat(a.getDischargeStatus()).as("check dischargeStatus").isEqualTo(expected.getDischargeStatus()))
            .satisfies(a -> assertThat(a.getAdmissionTime()).as("check admissionTime").isEqualTo(expected.getAdmissionTime()))
            .satisfies(a -> assertThat(a.getDischargeTime()).as("check dischargeTime").isEqualTo(expected.getDischargeTime()))
            .satisfies(a -> assertThat(a.getPaymentStatus()).as("check paymentStatus").isEqualTo(expected.getPaymentStatus()))
            .satisfies(a -> assertThat(a.getTotalBillAmount()).as("check totalBillAmount").isEqualTo(expected.getTotalBillAmount()))
            .satisfies(a ->
                assertThat(a.getInsuranceCoveredAmount()).as("check insuranceCoveredAmount").isEqualTo(expected.getInsuranceCoveredAmount())
            )
            .satisfies(a -> assertThat(a.getIsActive()).as("check isActive").isEqualTo(expected.getIsActive()))
            .satisfies(a -> assertThat(a.getCreatedBy()).as("check createdBy").isEqualTo(expected.getCreatedBy()))
            .satisfies(a -> assertThat(a.getCreatedOn()).as("check createdOn").isEqualTo(expected.getCreatedOn()))
            .satisfies(a -> assertThat(a.getUpdatedBy()).as("check updatedBy").isEqualTo(expected.getUpdatedBy()))
            .satisfies(a -> assertThat(a.getUpdatedOn()).as("check updatedOn").isEqualTo(expected.getUpdatedOn()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAdmissionUpdatableRelationshipsEquals(Admission expected, Admission actual) {
        assertThat(actual)
            .as("Verify Admission relationships")
            .satisfies(a -> assertThat(a.getBeds()).as("check beds").isEqualTo(expected.getBeds()))
            .satisfies(a -> assertThat(a.getPatient()).as("check patient").isEqualTo(expected.getPatient()))
            .satisfies(a -> assertThat(a.getHospital()).as("check hospital").isEqualTo(expected.getHospital()))
            .satisfies(a -> assertThat(a.getAdmittedUnder()).as("check admittedUnder").isEqualTo(expected.getAdmittedUnder()));
    }
}
