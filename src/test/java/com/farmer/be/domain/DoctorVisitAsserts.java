package com.farmer.be.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class DoctorVisitAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertDoctorVisitAllPropertiesEquals(DoctorVisit expected, DoctorVisit actual) {
        assertDoctorVisitAutoGeneratedPropertiesEquals(expected, actual);
        assertDoctorVisitAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertDoctorVisitAllUpdatablePropertiesEquals(DoctorVisit expected, DoctorVisit actual) {
        assertDoctorVisitUpdatableFieldsEquals(expected, actual);
        assertDoctorVisitUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertDoctorVisitAutoGeneratedPropertiesEquals(DoctorVisit expected, DoctorVisit actual) {
        assertThat(actual)
            .as("Verify DoctorVisit auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertDoctorVisitUpdatableFieldsEquals(DoctorVisit expected, DoctorVisit actual) {
        assertThat(actual)
            .as("Verify DoctorVisit relevant properties")
            .satisfies(a -> assertThat(a.getDescription()).as("check description").isEqualTo(expected.getDescription()))
            .satisfies(a -> assertThat(a.getStatus()).as("check status").isEqualTo(expected.getStatus()))
            .satisfies(a -> assertThat(a.getVisitDate()).as("check visitDate").isEqualTo(expected.getVisitDate()))
            .satisfies(a -> assertThat(a.getVisitTime()).as("check visitTime").isEqualTo(expected.getVisitTime()))
            .satisfies(a -> assertThat(a.getIsActive()).as("check isActive").isEqualTo(expected.getIsActive()))
            .satisfies(a -> assertThat(a.getCreatedBy()).as("check createdBy").isEqualTo(expected.getCreatedBy()))
            .satisfies(a -> assertThat(a.getCreatedOn()).as("check createdOn").isEqualTo(expected.getCreatedOn()))
            .satisfies(a -> assertThat(a.getUpdatedBy()).as("check updatedBy").isEqualTo(expected.getUpdatedBy()))
            .satisfies(a -> assertThat(a.getUpdatedOn()).as("check updatedOn").isEqualTo(expected.getUpdatedOn()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertDoctorVisitUpdatableRelationshipsEquals(DoctorVisit expected, DoctorVisit actual) {
        assertThat(actual)
            .as("Verify DoctorVisit relationships")
            .satisfies(a -> assertThat(a.getPrescription()).as("check prescription").isEqualTo(expected.getPrescription()))
            .satisfies(a -> assertThat(a.getDoctorVisitType()).as("check doctorVisitType").isEqualTo(expected.getDoctorVisitType()))
            .satisfies(a -> assertThat(a.getPatient()).as("check patient").isEqualTo(expected.getPatient()))
            .satisfies(a -> assertThat(a.getAdmissions()).as("check admissions").isEqualTo(expected.getAdmissions()));
    }
}
