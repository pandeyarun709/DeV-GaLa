package com.farmer.be.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class QualificationAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertQualificationAllPropertiesEquals(Qualification expected, Qualification actual) {
        assertQualificationAutoGeneratedPropertiesEquals(expected, actual);
        assertQualificationAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertQualificationAllUpdatablePropertiesEquals(Qualification expected, Qualification actual) {
        assertQualificationUpdatableFieldsEquals(expected, actual);
        assertQualificationUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertQualificationAutoGeneratedPropertiesEquals(Qualification expected, Qualification actual) {
        assertThat(actual)
            .as("Verify Qualification auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertQualificationUpdatableFieldsEquals(Qualification expected, Qualification actual) {
        assertThat(actual)
            .as("Verify Qualification relevant properties")
            .satisfies(a -> assertThat(a.getName()).as("check name").isEqualTo(expected.getName()))
            .satisfies(a -> assertThat(a.getIsActive()).as("check isActive").isEqualTo(expected.getIsActive()))
            .satisfies(a -> assertThat(a.getCreatedBy()).as("check createdBy").isEqualTo(expected.getCreatedBy()))
            .satisfies(a -> assertThat(a.getCreatedOn()).as("check createdOn").isEqualTo(expected.getCreatedOn()))
            .satisfies(a -> assertThat(a.getUpdatedBy()).as("check updatedBy").isEqualTo(expected.getUpdatedBy()))
            .satisfies(a -> assertThat(a.getUpdatedOn()).as("check updatedOn").isEqualTo(expected.getUpdatedOn()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertQualificationUpdatableRelationshipsEquals(Qualification expected, Qualification actual) {
        assertThat(actual)
            .as("Verify Qualification relationships")
            .satisfies(a -> assertThat(a.getEmployees()).as("check employees").isEqualTo(expected.getEmployees()));
    }
}
