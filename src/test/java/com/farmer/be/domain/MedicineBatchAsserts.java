package com.farmer.be.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class MedicineBatchAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertMedicineBatchAllPropertiesEquals(MedicineBatch expected, MedicineBatch actual) {
        assertMedicineBatchAutoGeneratedPropertiesEquals(expected, actual);
        assertMedicineBatchAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertMedicineBatchAllUpdatablePropertiesEquals(MedicineBatch expected, MedicineBatch actual) {
        assertMedicineBatchUpdatableFieldsEquals(expected, actual);
        assertMedicineBatchUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertMedicineBatchAutoGeneratedPropertiesEquals(MedicineBatch expected, MedicineBatch actual) {
        assertThat(actual)
            .as("Verify MedicineBatch auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertMedicineBatchUpdatableFieldsEquals(MedicineBatch expected, MedicineBatch actual) {
        assertThat(actual)
            .as("Verify MedicineBatch relevant properties")
            .satisfies(a -> assertThat(a.getBatchNo()).as("check batchNo").isEqualTo(expected.getBatchNo()))
            .satisfies(a -> assertThat(a.getExpiryDate()).as("check expiryDate").isEqualTo(expected.getExpiryDate()))
            .satisfies(a -> assertThat(a.getQuantity()).as("check quantity").isEqualTo(expected.getQuantity()))
            .satisfies(a -> assertThat(a.getSellingPrice()).as("check sellingPrice").isEqualTo(expected.getSellingPrice()))
            .satisfies(a -> assertThat(a.getStorageLocation()).as("check storageLocation").isEqualTo(expected.getStorageLocation()))
            .satisfies(a -> assertThat(a.getRackNo()).as("check rackNo").isEqualTo(expected.getRackNo()))
            .satisfies(a -> assertThat(a.getIsActive()).as("check isActive").isEqualTo(expected.getIsActive()))
            .satisfies(a -> assertThat(a.getCreatedBy()).as("check createdBy").isEqualTo(expected.getCreatedBy()))
            .satisfies(a -> assertThat(a.getCreatedOn()).as("check createdOn").isEqualTo(expected.getCreatedOn()))
            .satisfies(a -> assertThat(a.getUpdatedBy()).as("check updatedBy").isEqualTo(expected.getUpdatedBy()))
            .satisfies(a -> assertThat(a.getUpdatedOn()).as("check updatedOn").isEqualTo(expected.getUpdatedOn()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertMedicineBatchUpdatableRelationshipsEquals(MedicineBatch expected, MedicineBatch actual) {
        assertThat(actual)
            .as("Verify MedicineBatch relationships")
            .satisfies(a -> assertThat(a.getMed()).as("check med").isEqualTo(expected.getMed()))
            .satisfies(a -> assertThat(a.getHospital()).as("check hospital").isEqualTo(expected.getHospital()))
            .satisfies(a -> assertThat(a.getAdmissions()).as("check admissions").isEqualTo(expected.getAdmissions()));
    }
}
