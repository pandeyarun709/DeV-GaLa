package com.farmer.be.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class SlotAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSlotAllPropertiesEquals(Slot expected, Slot actual) {
        assertSlotAutoGeneratedPropertiesEquals(expected, actual);
        assertSlotAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSlotAllUpdatablePropertiesEquals(Slot expected, Slot actual) {
        assertSlotUpdatableFieldsEquals(expected, actual);
        assertSlotUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSlotAutoGeneratedPropertiesEquals(Slot expected, Slot actual) {
        assertThat(actual)
            .as("Verify Slot auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSlotUpdatableFieldsEquals(Slot expected, Slot actual) {
        assertThat(actual)
            .as("Verify Slot relevant properties")
            .satisfies(a -> assertThat(a.getDay()).as("check day").isEqualTo(expected.getDay()))
            .satisfies(a -> assertThat(a.getStartTimeHour()).as("check startTimeHour").isEqualTo(expected.getStartTimeHour()))
            .satisfies(a -> assertThat(a.getStartTimeMin()).as("check startTimeMin").isEqualTo(expected.getStartTimeMin()))
            .satisfies(a -> assertThat(a.getEndTimeHour()).as("check endTimeHour").isEqualTo(expected.getEndTimeHour()))
            .satisfies(a -> assertThat(a.getEndTimeMin()).as("check endTimeMin").isEqualTo(expected.getEndTimeMin()))
            .satisfies(a -> assertThat(a.getIsActive()).as("check isActive").isEqualTo(expected.getIsActive()))
            .satisfies(a -> assertThat(a.getCreatedBy()).as("check createdBy").isEqualTo(expected.getCreatedBy()))
            .satisfies(a -> assertThat(a.getCreatedOn()).as("check createdOn").isEqualTo(expected.getCreatedOn()))
            .satisfies(a -> assertThat(a.getUpdatedBy()).as("check updatedBy").isEqualTo(expected.getUpdatedBy()))
            .satisfies(a -> assertThat(a.getUpdatedOn()).as("check updatedOn").isEqualTo(expected.getUpdatedOn()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSlotUpdatableRelationshipsEquals(Slot expected, Slot actual) {
        assertThat(actual)
            .as("Verify Slot relationships")
            .satisfies(a -> assertThat(a.getDoctorVisitType()).as("check doctorVisitType").isEqualTo(expected.getDoctorVisitType()))
            .satisfies(a -> assertThat(a.getTest()).as("check test").isEqualTo(expected.getTest()));
    }
}
