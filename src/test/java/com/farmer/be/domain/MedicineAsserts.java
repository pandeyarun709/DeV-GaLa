package com.farmer.be.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class MedicineAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertMedicineAllPropertiesEquals(Medicine expected, Medicine actual) {
        assertMedicineAutoGeneratedPropertiesEquals(expected, actual);
        assertMedicineAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertMedicineAllUpdatablePropertiesEquals(Medicine expected, Medicine actual) {
        assertMedicineUpdatableFieldsEquals(expected, actual);
        assertMedicineUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertMedicineAutoGeneratedPropertiesEquals(Medicine expected, Medicine actual) {
        assertThat(actual)
            .as("Verify Medicine auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertMedicineUpdatableFieldsEquals(Medicine expected, Medicine actual) {
        assertThat(actual)
            .as("Verify Medicine relevant properties")
            .satisfies(a -> assertThat(a.getName()).as("check name").isEqualTo(expected.getName()))
            .satisfies(a -> assertThat(a.getGenericMolecule()).as("check genericMolecule").isEqualTo(expected.getGenericMolecule()))
            .satisfies(a ->
                assertThat(a.getIsPrescriptionNeeded()).as("check isPrescriptionNeeded").isEqualTo(expected.getIsPrescriptionNeeded())
            )
            .satisfies(a -> assertThat(a.getDescription()).as("check description").isEqualTo(expected.getDescription()))
            .satisfies(a -> assertThat(a.getMrp()).as("check mrp").isEqualTo(expected.getMrp()))
            .satisfies(a -> assertThat(a.getIsInsuranceCovered()).as("check isInsuranceCovered").isEqualTo(expected.getIsInsuranceCovered())
            )
            .satisfies(a -> assertThat(a.getType()).as("check type").isEqualTo(expected.getType()))
            .satisfies(a -> assertThat(a.getIsConsumable()).as("check isConsumable").isEqualTo(expected.getIsConsumable()))
            .satisfies(a -> assertThat(a.getIsReturnable()).as("check isReturnable").isEqualTo(expected.getIsReturnable()))
            .satisfies(a -> assertThat(a.getIsActive()).as("check isActive").isEqualTo(expected.getIsActive()))
            .satisfies(a -> assertThat(a.getCreatedBy()).as("check createdBy").isEqualTo(expected.getCreatedBy()))
            .satisfies(a -> assertThat(a.getCreatedOn()).as("check createdOn").isEqualTo(expected.getCreatedOn()))
            .satisfies(a -> assertThat(a.getUpdatedBy()).as("check updatedBy").isEqualTo(expected.getUpdatedBy()))
            .satisfies(a -> assertThat(a.getUpdatedOn()).as("check updatedOn").isEqualTo(expected.getUpdatedOn()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertMedicineUpdatableRelationshipsEquals(Medicine expected, Medicine actual) {
        // empty method
    }
}
