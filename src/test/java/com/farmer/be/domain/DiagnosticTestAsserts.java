package com.farmer.be.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class DiagnosticTestAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertDiagnosticTestAllPropertiesEquals(DiagnosticTest expected, DiagnosticTest actual) {
        assertDiagnosticTestAutoGeneratedPropertiesEquals(expected, actual);
        assertDiagnosticTestAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertDiagnosticTestAllUpdatablePropertiesEquals(DiagnosticTest expected, DiagnosticTest actual) {
        assertDiagnosticTestUpdatableFieldsEquals(expected, actual);
        assertDiagnosticTestUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertDiagnosticTestAutoGeneratedPropertiesEquals(DiagnosticTest expected, DiagnosticTest actual) {
        assertThat(actual)
            .as("Verify DiagnosticTest auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertDiagnosticTestUpdatableFieldsEquals(DiagnosticTest expected, DiagnosticTest actual) {
        assertThat(actual)
            .as("Verify DiagnosticTest relevant properties")
            .satisfies(a -> assertThat(a.getName()).as("check name").isEqualTo(expected.getName()))
            .satisfies(a -> assertThat(a.getPhone()).as("check phone").isEqualTo(expected.getPhone()))
            .satisfies(a -> assertThat(a.getEmail()).as("check email").isEqualTo(expected.getEmail()))
            .satisfies(a -> assertThat(a.getFee()).as("check fee").isEqualTo(expected.getFee()))
            .satisfies(a -> assertThat(a.getIsInsuranceCovered()).as("check isInsuranceCovered").isEqualTo(expected.getIsInsuranceCovered())
            )
            .satisfies(a -> assertThat(a.getIsActive()).as("check isActive").isEqualTo(expected.getIsActive()))
            .satisfies(a -> assertThat(a.getCreatedBy()).as("check createdBy").isEqualTo(expected.getCreatedBy()))
            .satisfies(a -> assertThat(a.getCreatedOn()).as("check createdOn").isEqualTo(expected.getCreatedOn()))
            .satisfies(a -> assertThat(a.getUpdatedBy()).as("check updatedBy").isEqualTo(expected.getUpdatedBy()))
            .satisfies(a -> assertThat(a.getUpdatedOn()).as("check updatedOn").isEqualTo(expected.getUpdatedOn()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertDiagnosticTestUpdatableRelationshipsEquals(DiagnosticTest expected, DiagnosticTest actual) {
        assertThat(actual)
            .as("Verify DiagnosticTest relationships")
            .satisfies(a -> assertThat(a.getDepartment()).as("check department").isEqualTo(expected.getDepartment()))
            .satisfies(a -> assertThat(a.getPrescription()).as("check prescription").isEqualTo(expected.getPrescription()));
    }
}
