package com.farmer.be.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class MedicineDoseAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertMedicineDoseAllPropertiesEquals(MedicineDose expected, MedicineDose actual) {
        assertMedicineDoseAutoGeneratedPropertiesEquals(expected, actual);
        assertMedicineDoseAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertMedicineDoseAllUpdatablePropertiesEquals(MedicineDose expected, MedicineDose actual) {
        assertMedicineDoseUpdatableFieldsEquals(expected, actual);
        assertMedicineDoseUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertMedicineDoseAutoGeneratedPropertiesEquals(MedicineDose expected, MedicineDose actual) {
        assertThat(actual)
            .as("Verify MedicineDose auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertMedicineDoseUpdatableFieldsEquals(MedicineDose expected, MedicineDose actual) {
        assertThat(actual)
            .as("Verify MedicineDose relevant properties")
            .satisfies(a -> assertThat(a.getFrequency()).as("check frequency").isEqualTo(expected.getFrequency()))
            .satisfies(a -> assertThat(a.getIsActive()).as("check isActive").isEqualTo(expected.getIsActive()))
            .satisfies(a -> assertThat(a.getCreatedBy()).as("check createdBy").isEqualTo(expected.getCreatedBy()))
            .satisfies(a -> assertThat(a.getCreatedOn()).as("check createdOn").isEqualTo(expected.getCreatedOn()))
            .satisfies(a -> assertThat(a.getUpdatedBy()).as("check updatedBy").isEqualTo(expected.getUpdatedBy()))
            .satisfies(a -> assertThat(a.getUpdatedOn()).as("check updatedOn").isEqualTo(expected.getUpdatedOn()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertMedicineDoseUpdatableRelationshipsEquals(MedicineDose expected, MedicineDose actual) {
        assertThat(actual)
            .as("Verify MedicineDose relationships")
            .satisfies(a -> assertThat(a.getPrescription()).as("check prescription").isEqualTo(expected.getPrescription()))
            .satisfies(a -> assertThat(a.getMedicine()).as("check medicine").isEqualTo(expected.getMedicine()));
    }
}
