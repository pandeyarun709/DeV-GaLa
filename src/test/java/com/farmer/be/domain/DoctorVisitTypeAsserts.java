package com.farmer.be.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class DoctorVisitTypeAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertDoctorVisitTypeAllPropertiesEquals(DoctorVisitType expected, DoctorVisitType actual) {
        assertDoctorVisitTypeAutoGeneratedPropertiesEquals(expected, actual);
        assertDoctorVisitTypeAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertDoctorVisitTypeAllUpdatablePropertiesEquals(DoctorVisitType expected, DoctorVisitType actual) {
        assertDoctorVisitTypeUpdatableFieldsEquals(expected, actual);
        assertDoctorVisitTypeUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertDoctorVisitTypeAutoGeneratedPropertiesEquals(DoctorVisitType expected, DoctorVisitType actual) {
        assertThat(actual)
            .as("Verify DoctorVisitType auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertDoctorVisitTypeUpdatableFieldsEquals(DoctorVisitType expected, DoctorVisitType actual) {
        assertThat(actual)
            .as("Verify DoctorVisitType relevant properties")
            .satisfies(a -> assertThat(a.getType()).as("check type").isEqualTo(expected.getType()))
            .satisfies(a -> assertThat(a.getFee()).as("check fee").isEqualTo(expected.getFee()))
            .satisfies(a -> assertThat(a.getIsInsuranceCovered()).as("check isInsuranceCovered").isEqualTo(expected.getIsInsuranceCovered())
            )
            .satisfies(a -> assertThat(a.getIsActive()).as("check isActive").isEqualTo(expected.getIsActive()))
            .satisfies(a -> assertThat(a.getCreatedBy()).as("check createdBy").isEqualTo(expected.getCreatedBy()))
            .satisfies(a -> assertThat(a.getCreatedOn()).as("check createdOn").isEqualTo(expected.getCreatedOn()))
            .satisfies(a -> assertThat(a.getUpdatedBy()).as("check updatedBy").isEqualTo(expected.getUpdatedBy()))
            .satisfies(a -> assertThat(a.getUpdatedOn()).as("check updatedOn").isEqualTo(expected.getUpdatedOn()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertDoctorVisitTypeUpdatableRelationshipsEquals(DoctorVisitType expected, DoctorVisitType actual) {
        assertThat(actual)
            .as("Verify DoctorVisitType relationships")
            .satisfies(a -> assertThat(a.getDoctor()).as("check doctor").isEqualTo(expected.getDoctor()));
    }
}
