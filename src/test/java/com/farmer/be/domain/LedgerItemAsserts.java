package com.farmer.be.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class LedgerItemAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertLedgerItemAllPropertiesEquals(LedgerItem expected, LedgerItem actual) {
        assertLedgerItemAutoGeneratedPropertiesEquals(expected, actual);
        assertLedgerItemAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertLedgerItemAllUpdatablePropertiesEquals(LedgerItem expected, LedgerItem actual) {
        assertLedgerItemUpdatableFieldsEquals(expected, actual);
        assertLedgerItemUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertLedgerItemAutoGeneratedPropertiesEquals(LedgerItem expected, LedgerItem actual) {
        assertThat(actual)
            .as("Verify LedgerItem auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertLedgerItemUpdatableFieldsEquals(LedgerItem expected, LedgerItem actual) {
        assertThat(actual)
            .as("Verify LedgerItem relevant properties")
            .satisfies(a -> assertThat(a.getTime()).as("check time").isEqualTo(expected.getTime()))
            .satisfies(a -> assertThat(a.getDescription()).as("check description").isEqualTo(expected.getDescription()))
            .satisfies(a -> assertThat(a.getFee()).as("check fee").isEqualTo(expected.getFee()))
            .satisfies(a ->
                assertThat(a.getIsCoveredByInsurance()).as("check isCoveredByInsurance").isEqualTo(expected.getIsCoveredByInsurance())
            )
            .satisfies(a -> assertThat(a.getIsActive()).as("check isActive").isEqualTo(expected.getIsActive()))
            .satisfies(a -> assertThat(a.getCreatedBy()).as("check createdBy").isEqualTo(expected.getCreatedBy()))
            .satisfies(a -> assertThat(a.getCreatedOn()).as("check createdOn").isEqualTo(expected.getCreatedOn()))
            .satisfies(a -> assertThat(a.getUpdatedBy()).as("check updatedBy").isEqualTo(expected.getUpdatedBy()))
            .satisfies(a -> assertThat(a.getUpdatedOn()).as("check updatedOn").isEqualTo(expected.getUpdatedOn()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertLedgerItemUpdatableRelationshipsEquals(LedgerItem expected, LedgerItem actual) {
        assertThat(actual)
            .as("Verify LedgerItem relationships")
            .satisfies(a -> assertThat(a.getAdmission()).as("check admission").isEqualTo(expected.getAdmission()));
    }
}
