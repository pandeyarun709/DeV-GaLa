package com.farmer.be.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class PrescriptionAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPrescriptionAllPropertiesEquals(Prescription expected, Prescription actual) {
        assertPrescriptionAutoGeneratedPropertiesEquals(expected, actual);
        assertPrescriptionAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPrescriptionAllUpdatablePropertiesEquals(Prescription expected, Prescription actual) {
        assertPrescriptionUpdatableFieldsEquals(expected, actual);
        assertPrescriptionUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPrescriptionAutoGeneratedPropertiesEquals(Prescription expected, Prescription actual) {
        assertThat(actual)
            .as("Verify Prescription auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPrescriptionUpdatableFieldsEquals(Prescription expected, Prescription actual) {
        assertThat(actual)
            .as("Verify Prescription relevant properties")
            .satisfies(a -> assertThat(a.getHistory()).as("check history").isEqualTo(expected.getHistory()))
            .satisfies(a -> assertThat(a.getCompliant()).as("check compliant").isEqualTo(expected.getCompliant()))
            .satisfies(a -> assertThat(a.getHeight()).as("check height").isEqualTo(expected.getHeight()))
            .satisfies(a -> assertThat(a.getWeight()).as("check weight").isEqualTo(expected.getWeight()))
            .satisfies(a -> assertThat(a.getBpHigh()).as("check bpHigh").isEqualTo(expected.getBpHigh()))
            .satisfies(a -> assertThat(a.getBpLow()).as("check bpLow").isEqualTo(expected.getBpLow()))
            .satisfies(a -> assertThat(a.getTemperature()).as("check temperature").isEqualTo(expected.getTemperature()))
            .satisfies(a -> assertThat(a.getOtherVital()).as("check otherVital").isEqualTo(expected.getOtherVital()))
            .satisfies(a -> assertThat(a.getDescription()).as("check description").isEqualTo(expected.getDescription()))
            .satisfies(a -> assertThat(a.getIsActive()).as("check isActive").isEqualTo(expected.getIsActive()))
            .satisfies(a -> assertThat(a.getCreatedBy()).as("check createdBy").isEqualTo(expected.getCreatedBy()))
            .satisfies(a -> assertThat(a.getCreatedOn()).as("check createdOn").isEqualTo(expected.getCreatedOn()))
            .satisfies(a -> assertThat(a.getUpdatedBy()).as("check updatedBy").isEqualTo(expected.getUpdatedBy()))
            .satisfies(a -> assertThat(a.getUpdatedOn()).as("check updatedOn").isEqualTo(expected.getUpdatedOn()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPrescriptionUpdatableRelationshipsEquals(Prescription expected, Prescription actual) {
        // empty method
    }
}
