package com.farmer.be.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class ReferralDoctorAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertReferralDoctorAllPropertiesEquals(ReferralDoctor expected, ReferralDoctor actual) {
        assertReferralDoctorAutoGeneratedPropertiesEquals(expected, actual);
        assertReferralDoctorAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertReferralDoctorAllUpdatablePropertiesEquals(ReferralDoctor expected, ReferralDoctor actual) {
        assertReferralDoctorUpdatableFieldsEquals(expected, actual);
        assertReferralDoctorUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertReferralDoctorAutoGeneratedPropertiesEquals(ReferralDoctor expected, ReferralDoctor actual) {
        assertThat(actual)
            .as("Verify ReferralDoctor auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertReferralDoctorUpdatableFieldsEquals(ReferralDoctor expected, ReferralDoctor actual) {
        assertThat(actual)
            .as("Verify ReferralDoctor relevant properties")
            .satisfies(a -> assertThat(a.getName()).as("check name").isEqualTo(expected.getName()))
            .satisfies(a -> assertThat(a.getPhone()).as("check phone").isEqualTo(expected.getPhone()))
            .satisfies(a -> assertThat(a.getEmail()).as("check email").isEqualTo(expected.getEmail()))
            .satisfies(a -> assertThat(a.getRegistrationNo()).as("check registrationNo").isEqualTo(expected.getRegistrationNo()))
            .satisfies(a -> assertThat(a.getIsActive()).as("check isActive").isEqualTo(expected.getIsActive()))
            .satisfies(a -> assertThat(a.getCreatedBy()).as("check createdBy").isEqualTo(expected.getCreatedBy()))
            .satisfies(a -> assertThat(a.getCreatedOn()).as("check createdOn").isEqualTo(expected.getCreatedOn()))
            .satisfies(a -> assertThat(a.getUpdatedBy()).as("check updatedBy").isEqualTo(expected.getUpdatedBy()))
            .satisfies(a -> assertThat(a.getUpdatedOn()).as("check updatedOn").isEqualTo(expected.getUpdatedOn()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertReferralDoctorUpdatableRelationshipsEquals(ReferralDoctor expected, ReferralDoctor actual) {
        // empty method
    }
}
