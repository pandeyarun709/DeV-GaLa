package com.farmer.be.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class PatientAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPatientAllPropertiesEquals(Patient expected, Patient actual) {
        assertPatientAutoGeneratedPropertiesEquals(expected, actual);
        assertPatientAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPatientAllUpdatablePropertiesEquals(Patient expected, Patient actual) {
        assertPatientUpdatableFieldsEquals(expected, actual);
        assertPatientUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPatientAutoGeneratedPropertiesEquals(Patient expected, Patient actual) {
        assertThat(actual)
            .as("Verify Patient auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPatientUpdatableFieldsEquals(Patient expected, Patient actual) {
        assertThat(actual)
            .as("Verify Patient relevant properties")
            .satisfies(a -> assertThat(a.getRegistrationId()).as("check registrationId").isEqualTo(expected.getRegistrationId()))
            .satisfies(a -> assertThat(a.getName()).as("check name").isEqualTo(expected.getName()))
            .satisfies(a -> assertThat(a.getPhone()).as("check phone").isEqualTo(expected.getPhone()))
            .satisfies(a -> assertThat(a.getEmail()).as("check email").isEqualTo(expected.getEmail()))
            .satisfies(a -> assertThat(a.getSex()).as("check sex").isEqualTo(expected.getSex()))
            .satisfies(a -> assertThat(a.getDateOfBirth()).as("check dateOfBirth").isEqualTo(expected.getDateOfBirth()))
            .satisfies(a -> assertThat(a.getBloodGroup()).as("check bloodGroup").isEqualTo(expected.getBloodGroup()))
            .satisfies(a ->
                assertThat(a.getEmergencyContactName()).as("check emergencyContactName").isEqualTo(expected.getEmergencyContactName())
            )
            .satisfies(a ->
                assertThat(a.getEmergencyContactPhone()).as("check emergencyContactPhone").isEqualTo(expected.getEmergencyContactPhone())
            )
            .satisfies(a ->
                assertThat(a.getEmergencyContactEmail()).as("check emergencyContactEmail").isEqualTo(expected.getEmergencyContactEmail())
            )
            .satisfies(a ->
                assertThat(a.getEmergencyContactRelationShip())
                    .as("check emergencyContactRelationShip")
                    .isEqualTo(expected.getEmergencyContactRelationShip())
            )
            .satisfies(a -> assertThat(a.getIsActive()).as("check isActive").isEqualTo(expected.getIsActive()))
            .satisfies(a -> assertThat(a.getCreatedBy()).as("check createdBy").isEqualTo(expected.getCreatedBy()))
            .satisfies(a -> assertThat(a.getCreatedOn()).as("check createdOn").isEqualTo(expected.getCreatedOn()))
            .satisfies(a -> assertThat(a.getUpdatedBy()).as("check updatedBy").isEqualTo(expected.getUpdatedBy()))
            .satisfies(a -> assertThat(a.getUpdatedOn()).as("check updatedOn").isEqualTo(expected.getUpdatedOn()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPatientUpdatableRelationshipsEquals(Patient expected, Patient actual) {
        assertThat(actual)
            .as("Verify Patient relationships")
            .satisfies(a -> assertThat(a.getAddress()).as("check address").isEqualTo(expected.getAddress()));
    }
}
